# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  react_app:
    {% if build_images %}
    build:
      context: webapp
      dockerfile: Dockerfile
      args:
        NODEJS_IMAGE: ${NODEJS_IMAGE}
      labels:
        name: webapp
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.webapp:main
    {% endif %}
    depends_on:
      - frontapi
    profiles:
      - client
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_ORIGIN=${PUBLIC_ORIGIN}
    volumes:
      - ./webapp/src:/webapp/src
      - ./webapp/public:/webapp/public
      - ./webapp/next.config.js:/webapp/next.config.js

  frontapi:
    {% if build_images %}
    build:
      context: front_api
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        name: frontapi
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.frontapi:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - PartyServiceGRPCAddress=partyservice:${GRPCPort}
      - JaegerAddress=
    volumes:
      - ./front_api:/horahora/front_api

  scheduler:
    {% if build_images %}
    build:
      context: scheduler
      dockerfile: Dockerfile
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
        PYTHON_IMAGE: ${PYTHON_IMAGE}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: scheduler
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.scheduler:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
    volumes:
      - ./scheduler:/horahora/scheduler

  videoservice:
    {% if build_images %}
    build:
      context: video_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: videoservice
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.videoservice:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - redis_host=redis
      - redis_port=6379
      - redis_pass=
      - MaxDailyUploadMB=3000
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
    volumes:
      - ./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro

  userservice:
    {% if build_images %}
    build:
      context: user_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: userservice
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.userservice:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
    volumes:
      - ./user_service:/horahora/userservice

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}
        FLYWAY_VERSION: ${FLYWAY_VERSION}
      labels:
        name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data

  horaminio:
    build:
      context: minio
      dockerfile: Dockerfile
      args:
        UBUNTU_IMAGE: ${UBUNTU_IMAGE}
      labels:
        name: minio
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CACHE=off
    volumes:
      - ./videos:/data

  gluetun:
    build:
      context: gluetun
      dockerfile: Dockerfile.gluetun
      labels:
        name: gluetun
    cap_add:
      - NET_ADMIN
    env_file:
      - ./.env
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=wireguard
      - WIREGUARD_ADDRESSES=${VPN_IP}
      - SERVER_CITIES=${VPN_CITIES}
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
      - BLOCK_MALCIOUS=off
  nginx:
    image: anroe/nginx-headers-more
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - scheduler
      - videoservice
      - stomp_proxy
      - horaminio
    environment:
      - WEBAPP_ORIGIN=${WEBAPP_ORIGIN}
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./configs/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./videos/otomads:/etc/nginx/html/otomads

  rabbitmq:
    build:
      context: activemq
      labels:
        name: activemq
      dockerfile: Dockerfile
      args:
        ACTIVEMQ_IMAGE: ${ACTIVEMQ_IMAGE}
    restart: unless-stopped

  stomp_proxy:
    build:
      context: stomp_proxy
      dockerfile: Dockerfile
      labels:
        name: stomp_proxy
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./stomp_proxy:/horahora/stomp_proxy

# MIT License

# Copyright (c) 2017 Brian Christner

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# I some of the config below from https://github.com/vegasbrianc/prometheus
# thank you for your work!

  {% if build_monitoring %}
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    restart: always
    deploy:
      mode: global

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/:/etc/grafana/provisioning/

  redis:
    image: "redis:alpine"
    restart: always
  {% endif %}

volumes:
  {% if build_monitoring %}
  postgresdata_dev: {}
  prometheus_data: {}
  grafana_data: {}
  {% else %}
  postgresdata_dev: {}
  {% endif %}
