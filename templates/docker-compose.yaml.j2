# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  react_app:
    {% if build_images %}
    build:
      context: webapp
      dockerfile: Dockerfile
      args:
        NODEJS_IMAGE: ${NODEJS_IMAGE}
      labels:
        name: webapp
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.webapp:main
    {% endif %}
    depends_on:
      - frontapi
    profiles:
      - client
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_ORIGIN=${PUBLIC_ORIGIN}
    volumes:
      - ./webapp/src:/webapp/src
      - ./webapp/public:/webapp/public
      - ./webapp/next.config.js:/webapp/next.config.js

  frontapi:
    {% if build_images %}
    build:
      context: front_api
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        name: frontapi
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.frontapi:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - JaegerAddress=
    volumes:
      - ./front_api:/horahora/front_api

  scheduler:
    {% if build_images %}
    build:
      context: scheduler
      dockerfile: Dockerfile
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
        PYTHON_IMAGE: ${PYTHON_IMAGE}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: scheduler
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.scheduler:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
    volumes:
      - ./scheduler:/horahora/scheduler

  videoservice:
    {% if build_images %}
    build:
      context: video_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: videoservice
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.videoservice:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - redis_host=redis
      - redis_port=6379
      - redis_pass=
      - MaxDailyUploadMB=3000
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
    volumes:
      - ./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro

  userservice:
    {% if build_images %}
    build:
      context: user_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: userservice
    {%- else -%}
    image: ghcr.io/horahoradev/horahora/horahora.userservice:main
    {% endif %}
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
    volumes:
      - ./user_service:/horahora/userservice

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}
        FLYWAY_VERSION: ${FLYWAY_VERSION}
      labels:
        name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data

  minio:
    build:
      context: minio
      dockerfile: Dockerfile
      args:
        UBUNTU_IMAGE: ${UBUNTU_IMAGE}
      labels:
        name: minio
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CACHE=off
    volumes:
      - ./videos:/data

  gluetun:
    build:
      context: gluetun
      dockerfile: Dockerfile.gluetun
      labels:
        name: gluetun
    cap_add:
      - NET_ADMIN
    env_file:
      - ./.env
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=wireguard
      - WIREGUARD_ADDRESSES=${VPN_IP}
      - SERVER_CITIES=${VPN_CITIES}
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
      - BLOCK_MALCIOUS=off
  nginx:
    image: nginx:mainline
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - scheduler
      - videoservice
      - stomp_proxy
      - minio
    environment:
      - WEBAPP_ORIGIN=${WEBAPP_ORIGIN}
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./configs/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./videos/otomads:/etc/nginx/html/otomads

  rabbitmq:
    build:
      context: activemq
      labels:
        name: activemq
      dockerfile: Dockerfile
      args:
        ACTIVEMQ_IMAGE: ${ACTIVEMQ_IMAGE}
    restart: unless-stopped

  stomp_proxy:
    build:
      context: stomp_proxy
      dockerfile: Dockerfile
      labels:
        name: stomp_proxy
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./stomp_proxy:/horahora/stomp_proxy

  # Redis server
  redis:
    image: eqalpha/keydb
    restart: always

  # MongoDB database
  database:
    image: mongo
    restart: always
    volumes:
      - ./data/db:/data/db

  # API server (delta)
  api:
    image: ghcr.io/revoltchat/server:20220715-1
    env_file: .env
    depends_on:
      - database
      - redis
    ports:
      - "8000:8000"
    restart: always

  # Events service (quark)
  events:
    image: ghcr.io/revoltchat/bonfire:20220715-1
    env_file: .env
    depends_on:
      - database
      - redis
    restart: always

  # Web App (revite)
  web:
    image: ghcr.io/revoltchat/client:master
    env_file: .env
    restart: always

  # S3-compatible storage server
  minio:
    image: minio/minio
    command: server /data
    env_file: .env
    volumes:
      - ./data/minio:/data
    restart: always

  # Create buckets for minio.
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    env_file: .env
    entrypoint: >
      /bin/sh -c "
      while ! curl -s --output /dev/null --connect-timeout 1 http://minio:9000; do echo 'Waiting minio...' && sleep 0.1; done;
      /usr/bin/mc alias set minio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb minio/attachments;
      /usr/bin/mc mb minio/avatars;
      /usr/bin/mc mb minio/backgrounds;
      /usr/bin/mc mb minio/icons;
      /usr/bin/mc mb minio/banners;
      /usr/bin/mc mb minio/emojis;
      exit 0;
      "
  # File server (autumn)
  autumn:
    image: ghcr.io/revoltchat/autumn:1.1.5
    env_file: .env
    depends_on:
      - database
      - createbuckets
    environment:
      - AUTUMN_MONGO_URI=mongodb://database
    restart: always

  # Metadata and image proxy (january)
  january:
    image: ghcr.io/revoltchat/january:master
    restart: always

volumes:
  postgresdata_dev:
