// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: videoservice.proto

package protocol

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VideoDeletionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoDeletionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoDeletionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoDeletionReqMultiError, or nil if none found.
func (m *VideoDeletionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoDeletionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	if len(errors) > 0 {
		return VideoDeletionReqMultiError(errors)
	}

	return nil
}

// VideoDeletionReqMultiError is an error wrapping multiple validation errors
// returned by VideoDeletionReq.ValidateAll() if the designated constraints
// aren't met.
type VideoDeletionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoDeletionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoDeletionReqMultiError) AllErrors() []error { return m }

// VideoDeletionReqValidationError is the validation error returned by
// VideoDeletionReq.Validate if the designated constraints aren't met.
type VideoDeletionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoDeletionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoDeletionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoDeletionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoDeletionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoDeletionReqValidationError) ErrorName() string { return "VideoDeletionReqValidationError" }

// Error satisfies the builtin error interface
func (e VideoDeletionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoDeletionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoDeletionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoDeletionReqValidationError{}

// Validate checks the field values on Nothing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Nothing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nothing with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NothingMultiError, or nil if none found.
func (m *Nothing) ValidateAll() error {
	return m.validate(true)
}

func (m *Nothing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NothingMultiError(errors)
	}

	return nil
}

// NothingMultiError is an error wrapping multiple validation errors returned
// by Nothing.ValidateAll() if the designated constraints aren't met.
type NothingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NothingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NothingMultiError) AllErrors() []error { return m }

// NothingValidationError is the validation error returned by Nothing.Validate
// if the designated constraints aren't met.
type NothingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NothingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NothingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NothingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NothingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NothingValidationError) ErrorName() string { return "NothingValidationError" }

// Error satisfies the builtin error interface
func (e NothingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNothing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NothingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NothingValidationError{}

// Validate checks the field values on RecReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecReqMultiError, or nil if none found.
func (m *RecReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RecReqMultiError(errors)
	}

	return nil
}

// RecReqMultiError is an error wrapping multiple validation errors returned by
// RecReq.ValidateAll() if the designated constraints aren't met.
type RecReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecReqMultiError) AllErrors() []error { return m }

// RecReqValidationError is the validation error returned by RecReq.Validate if
// the designated constraints aren't met.
type RecReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecReqValidationError) ErrorName() string { return "RecReqValidationError" }

// Error satisfies the builtin error interface
func (e RecReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecReqValidationError{}

// Validate checks the field values on RecResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecRespMultiError, or nil if none found.
func (m *RecResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RecResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecRespValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecRespValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecRespValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecRespMultiError(errors)
	}

	return nil
}

// RecRespMultiError is an error wrapping multiple validation errors returned
// by RecResp.ValidateAll() if the designated constraints aren't met.
type RecRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecRespMultiError) AllErrors() []error { return m }

// RecRespValidationError is the validation error returned by RecResp.Validate
// if the designated constraints aren't met.
type RecRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecRespValidationError) ErrorName() string { return "RecRespValidationError" }

// Error satisfies the builtin error interface
func (e RecRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecRespValidationError{}

// Validate checks the field values on VideoRec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoRec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoRec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoRecMultiError, or nil
// if none found.
func (m *VideoRec) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoRec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThumbnailLoc

	// no validation rules for VideoTitle

	// no validation rules for VideoID

	if len(errors) > 0 {
		return VideoRecMultiError(errors)
	}

	return nil
}

// VideoRecMultiError is an error wrapping multiple validation errors returned
// by VideoRec.ValidateAll() if the designated constraints aren't met.
type VideoRecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoRecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoRecMultiError) AllErrors() []error { return m }

// VideoRecValidationError is the validation error returned by
// VideoRec.Validate if the designated constraints aren't met.
type VideoRecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoRecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoRecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoRecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoRecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoRecValidationError) ErrorName() string { return "VideoRecValidationError" }

// Error satisfies the builtin error interface
func (e VideoRecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoRec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoRecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoRecValidationError{}

// Validate checks the field values on VideoComment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoComment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoCommentMultiError, or
// nil if none found.
func (m *VideoComment) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	// no validation rules for Comment

	// no validation rules for ParentComment

	if len(errors) > 0 {
		return VideoCommentMultiError(errors)
	}

	return nil
}

// VideoCommentMultiError is an error wrapping multiple validation errors
// returned by VideoComment.ValidateAll() if the designated constraints aren't met.
type VideoCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoCommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoCommentMultiError) AllErrors() []error { return m }

// VideoCommentValidationError is the validation error returned by
// VideoComment.Validate if the designated constraints aren't met.
type VideoCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoCommentValidationError) ErrorName() string { return "VideoCommentValidationError" }

// Error satisfies the builtin error interface
func (e VideoCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoCommentValidationError{}

// Validate checks the field values on CommentRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentRequestMultiError,
// or nil if none found.
func (m *CommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	// no validation rules for CurrUserID

	if len(errors) > 0 {
		return CommentRequestMultiError(errors)
	}

	return nil
}

// CommentRequestMultiError is an error wrapping multiple validation errors
// returned by CommentRequest.ValidateAll() if the designated constraints
// aren't met.
type CommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentRequestMultiError) AllErrors() []error { return m }

// CommentRequestValidationError is the validation error returned by
// CommentRequest.Validate if the designated constraints aren't met.
type CommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentRequestValidationError) ErrorName() string { return "CommentRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentRequestValidationError{}

// Validate checks the field values on CommentUpvote with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentUpvote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentUpvote with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentUpvoteMultiError, or
// nil if none found.
func (m *CommentUpvote) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentUpvote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CommentId

	// no validation rules for IsUpvote

	if len(errors) > 0 {
		return CommentUpvoteMultiError(errors)
	}

	return nil
}

// CommentUpvoteMultiError is an error wrapping multiple validation errors
// returned by CommentUpvote.ValidateAll() if the designated constraints
// aren't met.
type CommentUpvoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentUpvoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentUpvoteMultiError) AllErrors() []error { return m }

// CommentUpvoteValidationError is the validation error returned by
// CommentUpvote.Validate if the designated constraints aren't met.
type CommentUpvoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentUpvoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentUpvoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentUpvoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentUpvoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentUpvoteValidationError) ErrorName() string { return "CommentUpvoteValidationError" }

// Error satisfies the builtin error interface
func (e CommentUpvoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentUpvote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentUpvoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentUpvoteValidationError{}

// Validate checks the field values on CommentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListResponseMultiError, or nil if none found.
func (m *CommentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentListResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentListResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentListResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentListResponseMultiError(errors)
	}

	return nil
}

// CommentListResponseMultiError is an error wrapping multiple validation
// errors returned by CommentListResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListResponseMultiError) AllErrors() []error { return m }

// CommentListResponseValidationError is the validation error returned by
// CommentListResponse.Validate if the designated constraints aren't met.
type CommentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListResponseValidationError) ErrorName() string {
	return "CommentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListResponseValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for CreationDate

	// no validation rules for Content

	// no validation rules for AuthorUsername

	// no validation rules for AuthorProfileImageUrl

	// no validation rules for VoteScore

	// no validation rules for CurrentUserHasUpvoted

	// no validation rules for AuthorId

	// no validation rules for ParentId

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on VideoMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoMetadataMultiError, or
// nil if none found.
func (m *VideoMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoLoc

	// no validation rules for VideoTitle

	// no validation rules for Rating

	// no validation rules for AuthorName

	// no validation rules for Views

	// no validation rules for VideoID

	// no validation rules for UploadDate

	// no validation rules for Description

	// no validation rules for AuthorID

	if len(errors) > 0 {
		return VideoMetadataMultiError(errors)
	}

	return nil
}

// VideoMetadataMultiError is an error wrapping multiple validation errors
// returned by VideoMetadata.ValidateAll() if the designated constraints
// aren't met.
type VideoMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMetadataMultiError) AllErrors() []error { return m }

// VideoMetadataValidationError is the validation error returned by
// VideoMetadata.Validate if the designated constraints aren't met.
type VideoMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMetadataValidationError) ErrorName() string { return "VideoMetadataValidationError" }

// Error satisfies the builtin error interface
func (e VideoMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMetadataValidationError{}

// Validate checks the field values on VideoList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoListMultiError, or nil
// if none found.
func (m *VideoList) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoListValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoListValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoListValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NumberOfVideos

	if len(errors) > 0 {
		return VideoListMultiError(errors)
	}

	return nil
}

// VideoListMultiError is an error wrapping multiple validation errors returned
// by VideoList.ValidateAll() if the designated constraints aren't met.
type VideoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoListMultiError) AllErrors() []error { return m }

// VideoListValidationError is the validation error returned by
// VideoList.Validate if the designated constraints aren't met.
type VideoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoListValidationError) ErrorName() string { return "VideoListValidationError" }

// Error satisfies the builtin error interface
func (e VideoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoListValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoTitle

	// no validation rules for Views

	// no validation rules for Rating

	// no validation rules for ThumbnailLoc

	// no validation rules for VideoID

	// no validation rules for AuthorName

	// no validation rules for UploadDate

	// no validation rules for AuthorID

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on VideoRating with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoRating) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoRating with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoRatingMultiError, or
// nil if none found.
func (m *VideoRating) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoRating) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VideoID

	// no validation rules for Rating

	if len(errors) > 0 {
		return VideoRatingMultiError(errors)
	}

	return nil
}

// VideoRatingMultiError is an error wrapping multiple validation errors
// returned by VideoRating.ValidateAll() if the designated constraints aren't met.
type VideoRatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoRatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoRatingMultiError) AllErrors() []error { return m }

// VideoRatingValidationError is the validation error returned by
// VideoRating.Validate if the designated constraints aren't met.
type VideoRatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoRatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoRatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoRatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoRatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoRatingValidationError) ErrorName() string { return "VideoRatingValidationError" }

// Error satisfies the builtin error interface
func (e VideoRatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoRatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoRatingValidationError{}

// Validate checks the field values on VideoViewing with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoViewing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoViewing with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoViewingMultiError, or
// nil if none found.
func (m *VideoViewing) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoViewing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	if len(errors) > 0 {
		return VideoViewingMultiError(errors)
	}

	return nil
}

// VideoViewingMultiError is an error wrapping multiple validation errors
// returned by VideoViewing.ValidateAll() if the designated constraints aren't met.
type VideoViewingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoViewingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoViewingMultiError) AllErrors() []error { return m }

// VideoViewingValidationError is the validation error returned by
// VideoViewing.Validate if the designated constraints aren't met.
type VideoViewingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoViewingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoViewingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoViewingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoViewingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoViewingValidationError) ErrorName() string { return "VideoViewingValidationError" }

// Error satisfies the builtin error interface
func (e VideoViewingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoViewing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoViewingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoViewingValidationError{}

// Validate checks the field values on VideoApproval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoApproval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoApprovalMultiError, or
// nil if none found.
func (m *VideoApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VideoID

	if len(errors) > 0 {
		return VideoApprovalMultiError(errors)
	}

	return nil
}

// VideoApprovalMultiError is an error wrapping multiple validation errors
// returned by VideoApproval.ValidateAll() if the designated constraints
// aren't met.
type VideoApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoApprovalMultiError) AllErrors() []error { return m }

// VideoApprovalValidationError is the validation error returned by
// VideoApproval.Validate if the designated constraints aren't met.
type VideoApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoApprovalValidationError) ErrorName() string { return "VideoApprovalValidationError" }

// Error satisfies the builtin error interface
func (e VideoApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoApprovalValidationError{}

// Validate checks the field values on VideoQueryConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoQueryConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoQueryConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoQueryConfigMultiError, or nil if none found.
func (m *VideoQueryConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoQueryConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderBy

	// no validation rules for Direction

	// no validation rules for PageNumber

	// no validation rules for SearchVal

	// no validation rules for FromUserID

	// no validation rules for ShowUnapproved

	// no validation rules for UnapprovedOnly

	if len(errors) > 0 {
		return VideoQueryConfigMultiError(errors)
	}

	return nil
}

// VideoQueryConfigMultiError is an error wrapping multiple validation errors
// returned by VideoQueryConfig.ValidateAll() if the designated constraints
// aren't met.
type VideoQueryConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoQueryConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoQueryConfigMultiError) AllErrors() []error { return m }

// VideoQueryConfigValidationError is the validation error returned by
// VideoQueryConfig.Validate if the designated constraints aren't met.
type VideoQueryConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoQueryConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoQueryConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoQueryConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoQueryConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoQueryConfigValidationError) ErrorName() string { return "VideoQueryConfigValidationError" }

// Error satisfies the builtin error interface
func (e VideoQueryConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoQueryConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoQueryConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoQueryConfigValidationError{}

// Validate checks the field values on VideoExistenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoExistenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoExistenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoExistenceResponseMultiError, or nil if none found.
func (m *VideoExistenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoExistenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return VideoExistenceResponseMultiError(errors)
	}

	return nil
}

// VideoExistenceResponseMultiError is an error wrapping multiple validation
// errors returned by VideoExistenceResponse.ValidateAll() if the designated
// constraints aren't met.
type VideoExistenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoExistenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoExistenceResponseMultiError) AllErrors() []error { return m }

// VideoExistenceResponseValidationError is the validation error returned by
// VideoExistenceResponse.Validate if the designated constraints aren't met.
type VideoExistenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoExistenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoExistenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoExistenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoExistenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoExistenceResponseValidationError) ErrorName() string {
	return "VideoExistenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VideoExistenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoExistenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoExistenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoExistenceResponseValidationError{}

// Validate checks the field values on ForeignVideoCheck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForeignVideoCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForeignVideoCheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForeignVideoCheckMultiError, or nil if none found.
func (m *ForeignVideoCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *ForeignVideoCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ForeignVideoID

	// no validation rules for ForeignWebsite

	if len(errors) > 0 {
		return ForeignVideoCheckMultiError(errors)
	}

	return nil
}

// ForeignVideoCheckMultiError is an error wrapping multiple validation errors
// returned by ForeignVideoCheck.ValidateAll() if the designated constraints
// aren't met.
type ForeignVideoCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForeignVideoCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForeignVideoCheckMultiError) AllErrors() []error { return m }

// ForeignVideoCheckValidationError is the validation error returned by
// ForeignVideoCheck.Validate if the designated constraints aren't met.
type ForeignVideoCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForeignVideoCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForeignVideoCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForeignVideoCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForeignVideoCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForeignVideoCheckValidationError) ErrorName() string {
	return "ForeignVideoCheckValidationError"
}

// Error satisfies the builtin error interface
func (e ForeignVideoCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForeignVideoCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForeignVideoCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForeignVideoCheckValidationError{}

// Validate checks the field values on VideoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoRequestMultiError, or
// nil if none found.
func (m *VideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	if len(errors) > 0 {
		return VideoRequestMultiError(errors)
	}

	return nil
}

// VideoRequestMultiError is an error wrapping multiple validation errors
// returned by VideoRequest.ValidateAll() if the designated constraints aren't met.
type VideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoRequestMultiError) AllErrors() []error { return m }

// VideoRequestValidationError is the validation error returned by
// VideoRequest.Validate if the designated constraints aren't met.
type VideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoRequestValidationError) ErrorName() string { return "VideoRequestValidationError" }

// Error satisfies the builtin error interface
func (e VideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoRequestValidationError{}

// Validate checks the field values on InputVideoChunk with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InputVideoChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputVideoChunk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InputVideoChunkMultiError, or nil if none found.
func (m *InputVideoChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *InputVideoChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Payload.(type) {

	case *InputVideoChunk_Content:

		if all {
			switch v := interface{}(m.GetContent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputVideoChunkValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InputVideoChunk_Meta:

		if all {
			switch v := interface{}(m.GetMeta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputVideoChunkValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InputVideoChunk_Rawmeta:

		if all {
			switch v := interface{}(m.GetRawmeta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Rawmeta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputVideoChunkValidationError{
						field:  "Rawmeta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRawmeta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputVideoChunkValidationError{
					field:  "Rawmeta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InputVideoChunkMultiError(errors)
	}

	return nil
}

// InputVideoChunkMultiError is an error wrapping multiple validation errors
// returned by InputVideoChunk.ValidateAll() if the designated constraints
// aren't met.
type InputVideoChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputVideoChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputVideoChunkMultiError) AllErrors() []error { return m }

// InputVideoChunkValidationError is the validation error returned by
// InputVideoChunk.Validate if the designated constraints aren't met.
type InputVideoChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputVideoChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputVideoChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputVideoChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputVideoChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputVideoChunkValidationError) ErrorName() string { return "InputVideoChunkValidationError" }

// Error satisfies the builtin error interface
func (e InputVideoChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputVideoChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputVideoChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputVideoChunkValidationError{}

// Validate checks the field values on ResponseVideoChunk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseVideoChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseVideoChunk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseVideoChunkMultiError, or nil if none found.
func (m *ResponseVideoChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseVideoChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Payload.(type) {

	case *ResponseVideoChunk_Content:

		if all {
			switch v := interface{}(m.GetContent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseVideoChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseVideoChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseVideoChunkValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResponseVideoChunk_Meta:

		if all {
			switch v := interface{}(m.GetMeta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseVideoChunkValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseVideoChunkValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseVideoChunkValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponseVideoChunkMultiError(errors)
	}

	return nil
}

// ResponseVideoChunkMultiError is an error wrapping multiple validation errors
// returned by ResponseVideoChunk.ValidateAll() if the designated constraints
// aren't met.
type ResponseVideoChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseVideoChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseVideoChunkMultiError) AllErrors() []error { return m }

// ResponseVideoChunkValidationError is the validation error returned by
// ResponseVideoChunk.Validate if the designated constraints aren't met.
type ResponseVideoChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseVideoChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseVideoChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseVideoChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseVideoChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseVideoChunkValidationError) ErrorName() string {
	return "ResponseVideoChunkValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseVideoChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseVideoChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseVideoChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseVideoChunkValidationError{}

// Validate checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileContentMultiError, or
// nil if none found.
func (m *FileContent) ValidateAll() error {
	return m.validate(true)
}

func (m *FileContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return FileContentMultiError(errors)
	}

	return nil
}

// FileContentMultiError is an error wrapping multiple validation errors
// returned by FileContent.ValidateAll() if the designated constraints aren't met.
type FileContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileContentMultiError) AllErrors() []error { return m }

// FileContentValidationError is the validation error returned by
// FileContent.Validate if the designated constraints aren't met.
type FileContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentValidationError) ErrorName() string { return "FileContentValidationError" }

// Error satisfies the builtin error interface
func (e FileContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentValidationError{}

// Validate checks the field values on RawMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RawMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RawMetadataMultiError, or
// nil if none found.
func (m *RawMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RawMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return RawMetadataMultiError(errors)
	}

	return nil
}

// RawMetadataMultiError is an error wrapping multiple validation errors
// returned by RawMetadata.ValidateAll() if the designated constraints aren't met.
type RawMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawMetadataMultiError) AllErrors() []error { return m }

// RawMetadataValidationError is the validation error returned by
// RawMetadata.Validate if the designated constraints aren't met.
type RawMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawMetadataValidationError) ErrorName() string { return "RawMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RawMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawMetadataValidationError{}

// Validate checks the field values on InputFileMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InputFileMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputFileMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InputFileMetadataMultiError, or nil if none found.
func (m *InputFileMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *InputFileMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for AuthorUID

	// no validation rules for OriginalVideoLink

	// no validation rules for AuthorUsername

	// no validation rules for OriginalSite

	// no validation rules for OriginalID

	// no validation rules for DomesticAuthorID

	// no validation rules for Thumbnail

	if len(errors) > 0 {
		return InputFileMetadataMultiError(errors)
	}

	return nil
}

// InputFileMetadataMultiError is an error wrapping multiple validation errors
// returned by InputFileMetadata.ValidateAll() if the designated constraints
// aren't met.
type InputFileMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputFileMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputFileMetadataMultiError) AllErrors() []error { return m }

// InputFileMetadataValidationError is the validation error returned by
// InputFileMetadata.Validate if the designated constraints aren't met.
type InputFileMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputFileMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputFileMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputFileMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputFileMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputFileMetadataValidationError) ErrorName() string {
	return "InputFileMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e InputFileMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputFileMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputFileMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputFileMetadataValidationError{}

// Validate checks the field values on ResponseFileMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseFileMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseFileMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseFileMetadataMultiError, or nil if none found.
func (m *ResponseFileMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseFileMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for AuthorUID

	// no validation rules for OriginalVideoLink

	if len(errors) > 0 {
		return ResponseFileMetadataMultiError(errors)
	}

	return nil
}

// ResponseFileMetadataMultiError is an error wrapping multiple validation
// errors returned by ResponseFileMetadata.ValidateAll() if the designated
// constraints aren't met.
type ResponseFileMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseFileMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseFileMetadataMultiError) AllErrors() []error { return m }

// ResponseFileMetadataValidationError is the validation error returned by
// ResponseFileMetadata.Validate if the designated constraints aren't met.
type ResponseFileMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseFileMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseFileMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseFileMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseFileMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseFileMetadataValidationError) ErrorName() string {
	return "ResponseFileMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseFileMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseFileMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseFileMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseFileMetadataValidationError{}

// Validate checks the field values on UploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadResponseMultiError,
// or nil if none found.
func (m *UploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	if len(errors) > 0 {
		return UploadResponseMultiError(errors)
	}

	return nil
}

// UploadResponseMultiError is an error wrapping multiple validation errors
// returned by UploadResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadResponseMultiError) AllErrors() []error { return m }

// UploadResponseValidationError is the validation error returned by
// UploadResponse.Validate if the designated constraints aren't met.
type UploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadResponseValidationError) ErrorName() string { return "UploadResponseValidationError" }

// Error satisfies the builtin error interface
func (e UploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadResponseValidationError{}
