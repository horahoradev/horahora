# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  react_app:
    build: webapp
    restart: always
    volumes:
      - ./webapp/src:/webapp/src
      - ./webapp/public:/webapp/public
      - ./webapp/next.config.js:/webapp/next.config.js
    ports:
      - "3000:3000"
  frontapi:
    build:
      context: front_api
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
    depends_on:
      - postgres
    restart: always
    volumes:
      -./front_api:/horahora/front_api
    env_file:
      - ./.env.dev
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - JaegerAddress=
  scheduler:
    build:
      context: scheduler
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
        PYTHON_IMAGE: ${PYTHON_IMAGE}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
    depends_on:
      - postgres
    restart: always
    volumes:
      -./scheduler:/horahora/scheduler
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
  videoservice:
    build:
      context: video_service
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
    depends_on:
      - postgres
    restart: always
    volumes:
      -./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
  userservice:
    build:
      context: user_service
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
    restart: always
    volumes:
      -./user_service:/horahora/userservice
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data
  minio:
    build: minio
    restart: always
    env_file:
      - ./.env.dev
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./videos:/data
  gluetun:
    image: qmcgaw/gluetun
    cap_add:
      - NET_ADMIN
    env_file:
      - ./.env.dev
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=wireguard
      - WIREGUARD_ADDRESSES=${VPN_IP}
      - SERVER_CITIES=${VPN_CITIES}
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
  nginx:
    image: nginx
    restart: always
    ports:
      - "80:80"
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - scheduler
      - videoservice
      - stomp_proxy
      - minio
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./videos/otomads:/etc/nginx/html/otomads
  rabbitmq:
    build: activemq
    restart: always
  stomp_proxy:
    build:
      context: stomp_proxy
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
    depends_on:
      - postgres
    restart: always
    volumes:
      -./stomp_proxy:/horahora/stomp_proxy

volumes:
  postgresdata_dev:
