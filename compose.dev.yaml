# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  react_app:
    build:
      context: webapp
      dockerfile: Dockerfile.dev
      args:
        NODEJS_IMAGE: ${NODEJS_IMAGE}
      labels:
        name: webapp
    depends_on:
      - frontapi
    profiles:
      - client
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_ORIGIN=${PUBLIC_ORIGIN}
    volumes:
      - ./webapp/src:/webapp/src
      - ./webapp/public:/webapp/public
      - ./webapp/next.config.js:/webapp/next.config.js

  frontapi:
    build:
      context: front_api
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        name: frontapi
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - JaegerAddress=
    volumes:
      - ./front_api:/horahora/front_api

  scheduler:
    build:
      context: scheduler
      dockerfile: Dockerfile.dev
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
        PYTHON_IMAGE: ${PYTHON_IMAGE}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: scheduler
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
    volumes:
      - ./scheduler:/horahora/scheduler

  videoservice:
    build:
      context: video_service
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: videoservice
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
    volumes:
      - ./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro

  userservice:
    build:
      context: user_service
      dockerfile: Dockerfile.dev
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: userservice
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
    volumes:
      - ./user_service:/horahora/userservice

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres.dev
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}
        FLYWAY_VERSION: ${FLYWAY_VERSION}
      labels:
        name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data

  minio:
    build:
      context: minio
      dockerfile: Dockerfile.dev
      args:
        UBUNTU_IMAGE: ${UBUNTU_IMAGE}
      labels:
        name: minio
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CACHE=off
    volumes:
      - ./videos:/data

  gluetun:
    build:
      context: gluetun
      dockerfile: Dockerfile.gluetun
      labels:
        name: gluetun
    cap_add:
      - NET_ADMIN
    env_file:
      - ./.env.dev
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=wireguard
      - WIREGUARD_ADDRESSES=${VPN_IP}
      - SERVER_CITIES=${VPN_CITIES}
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
      - BLOCK_MALCIOUS=off
  nginx:
    image: nginx
    build:
      context: nginx
      dockerfile: Dockerfile.nginx
      labels:
        name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - scheduler
      - videoservice
      - stomp_proxy
      - minio
    environment:
      - WEBAPP_ORIGIN=${WEBAPP_ORIGIN}
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./nginx/dev.conf:/etc/nginx/templates/default.conf.template
      - ./videos/otomads:/etc/nginx/html/otomads

  rabbitmq:
    build:
      context: activemq
      labels:
        name: activemq
      dockerfile: Dockerfile.dev
      args:
        ACTIVEMQ_IMAGE: ${ACTIVEMQ_IMAGE}
    restart: unless-stopped

  stomp_proxy:
    build:
      context: stomp_proxy
      dockerfile: Dockerfile.dev
      labels:
        name: stomp_proxy
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./stomp_proxy:/horahora/stomp_proxy

volumes:
  postgresdata_dev:
