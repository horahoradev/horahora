// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: scheduler.proto

package protocol

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InferenceList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InferenceList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InferenceList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InferenceListMultiError, or
// nil if none found.
func (m *InferenceList) ValidateAll() error {
	return m.validate(true)
}

func (m *InferenceList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InferenceListValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InferenceListValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InferenceListValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InferenceListMultiError(errors)
	}

	return nil
}

// InferenceListMultiError is an error wrapping multiple validation errors
// returned by InferenceList.ValidateAll() if the designated constraints
// aren't met.
type InferenceListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InferenceListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InferenceListMultiError) AllErrors() []error { return m }

// InferenceListValidationError is the validation error returned by
// InferenceList.Validate if the designated constraints aren't met.
type InferenceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InferenceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InferenceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InferenceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InferenceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InferenceListValidationError) ErrorName() string { return "InferenceListValidationError" }

// Error satisfies the builtin error interface
func (e InferenceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInferenceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InferenceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InferenceListValidationError{}

// Validate checks the field values on InferenceEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InferenceEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InferenceEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InferenceEntryMultiError,
// or nil if none found.
func (m *InferenceEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *InferenceEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	// no validation rules for Category

	if len(errors) > 0 {
		return InferenceEntryMultiError(errors)
	}

	return nil
}

// InferenceEntryMultiError is an error wrapping multiple validation errors
// returned by InferenceEntry.ValidateAll() if the designated constraints
// aren't met.
type InferenceEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InferenceEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InferenceEntryMultiError) AllErrors() []error { return m }

// InferenceEntryValidationError is the validation error returned by
// InferenceEntry.Validate if the designated constraints aren't met.
type InferenceEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InferenceEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InferenceEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InferenceEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InferenceEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InferenceEntryValidationError) ErrorName() string { return "InferenceEntryValidationError" }

// Error satisfies the builtin error interface
func (e InferenceEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInferenceEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InferenceEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InferenceEntryValidationError{}

// Validate checks the field values on DownloadsInProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadsInProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadsInProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadsInProgressRequestMultiError, or nil if none found.
func (m *DownloadsInProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadsInProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DownloadsInProgressRequestMultiError(errors)
	}

	return nil
}

// DownloadsInProgressRequestMultiError is an error wrapping multiple
// validation errors returned by DownloadsInProgressRequest.ValidateAll() if
// the designated constraints aren't met.
type DownloadsInProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadsInProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadsInProgressRequestMultiError) AllErrors() []error { return m }

// DownloadsInProgressRequestValidationError is the validation error returned
// by DownloadsInProgressRequest.Validate if the designated constraints aren't met.
type DownloadsInProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadsInProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadsInProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadsInProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadsInProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadsInProgressRequestValidationError) ErrorName() string {
	return "DownloadsInProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadsInProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadsInProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadsInProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadsInProgressRequestValidationError{}

// Validate checks the field values on DownloadsInProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadsInProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadsInProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadsInProgressResponseMultiError, or nil if none found.
func (m *DownloadsInProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadsInProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DownloadsInProgressResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DownloadsInProgressResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DownloadsInProgressResponseValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DownloadsInProgressResponseMultiError(errors)
	}

	return nil
}

// DownloadsInProgressResponseMultiError is an error wrapping multiple
// validation errors returned by DownloadsInProgressResponse.ValidateAll() if
// the designated constraints aren't met.
type DownloadsInProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadsInProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadsInProgressResponseMultiError) AllErrors() []error { return m }

// DownloadsInProgressResponseValidationError is the validation error returned
// by DownloadsInProgressResponse.Validate if the designated constraints
// aren't met.
type DownloadsInProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadsInProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadsInProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadsInProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadsInProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadsInProgressResponseValidationError) ErrorName() string {
	return "DownloadsInProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadsInProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadsInProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadsInProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadsInProgressResponseValidationError{}

// Validate checks the field values on UnapprovedList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnapprovedList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnapprovedList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnapprovedListMultiError,
// or nil if none found.
func (m *UnapprovedList) ValidateAll() error {
	return m.validate(true)
}

func (m *UnapprovedList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnapprovedVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnapprovedListValidationError{
						field:  fmt.Sprintf("UnapprovedVideos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnapprovedListValidationError{
						field:  fmt.Sprintf("UnapprovedVideos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnapprovedListValidationError{
					field:  fmt.Sprintf("UnapprovedVideos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnapprovedListMultiError(errors)
	}

	return nil
}

// UnapprovedListMultiError is an error wrapping multiple validation errors
// returned by UnapprovedList.ValidateAll() if the designated constraints
// aren't met.
type UnapprovedListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnapprovedListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnapprovedListMultiError) AllErrors() []error { return m }

// UnapprovedListValidationError is the validation error returned by
// UnapprovedList.Validate if the designated constraints aren't met.
type UnapprovedListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnapprovedListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnapprovedListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnapprovedListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnapprovedListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnapprovedListValidationError) ErrorName() string { return "UnapprovedListValidationError" }

// Error satisfies the builtin error interface
func (e UnapprovedListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnapprovedList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnapprovedListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnapprovedListValidationError{}

// Validate checks the field values on UnapprovedVideo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnapprovedVideo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnapprovedVideo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnapprovedVideoMultiError, or nil if none found.
func (m *UnapprovedVideo) ValidateAll() error {
	return m.validate(true)
}

func (m *UnapprovedVideo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	// no validation rules for Url

	// no validation rules for Category

	if len(errors) > 0 {
		return UnapprovedVideoMultiError(errors)
	}

	return nil
}

// UnapprovedVideoMultiError is an error wrapping multiple validation errors
// returned by UnapprovedVideo.ValidateAll() if the designated constraints
// aren't met.
type UnapprovedVideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnapprovedVideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnapprovedVideoMultiError) AllErrors() []error { return m }

// UnapprovedVideoValidationError is the validation error returned by
// UnapprovedVideo.Validate if the designated constraints aren't met.
type UnapprovedVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnapprovedVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnapprovedVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnapprovedVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnapprovedVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnapprovedVideoValidationError) ErrorName() string { return "UnapprovedVideoValidationError" }

// Error satisfies the builtin error interface
func (e UnapprovedVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnapprovedVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnapprovedVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnapprovedVideoValidationError{}

// Validate checks the field values on ApproveVideoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApproveVideoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveVideoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveVideoReqMultiError, or nil if none found.
func (m *ApproveVideoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveVideoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	if len(errors) > 0 {
		return ApproveVideoReqMultiError(errors)
	}

	return nil
}

// ApproveVideoReqMultiError is an error wrapping multiple validation errors
// returned by ApproveVideoReq.ValidateAll() if the designated constraints
// aren't met.
type ApproveVideoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveVideoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveVideoReqMultiError) AllErrors() []error { return m }

// ApproveVideoReqValidationError is the validation error returned by
// ApproveVideoReq.Validate if the designated constraints aren't met.
type ApproveVideoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveVideoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveVideoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveVideoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveVideoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveVideoReqValidationError) ErrorName() string { return "ApproveVideoReqValidationError" }

// Error satisfies the builtin error interface
func (e ApproveVideoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveVideoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveVideoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveVideoReqValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoID

	// no validation rules for Website

	// no validation rules for DlStatus

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on RetryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RetryRequestMultiError, or
// nil if none found.
func (m *RetryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadID

	// no validation rules for UserID

	if len(errors) > 0 {
		return RetryRequestMultiError(errors)
	}

	return nil
}

// RetryRequestMultiError is an error wrapping multiple validation errors
// returned by RetryRequest.ValidateAll() if the designated constraints aren't met.
type RetryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryRequestMultiError) AllErrors() []error { return m }

// RetryRequestValidationError is the validation error returned by
// RetryRequest.Validate if the designated constraints aren't met.
type RetryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryRequestValidationError) ErrorName() string { return "RetryRequestValidationError" }

// Error satisfies the builtin error interface
func (e RetryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryRequestValidationError{}

// Validate checks the field values on DeletionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletionRequestMultiError, or nil if none found.
func (m *DeletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadID

	// no validation rules for UserID

	if len(errors) > 0 {
		return DeletionRequestMultiError(errors)
	}

	return nil
}

// DeletionRequestMultiError is an error wrapping multiple validation errors
// returned by DeletionRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletionRequestMultiError) AllErrors() []error { return m }

// DeletionRequestValidationError is the validation error returned by
// DeletionRequest.Validate if the designated constraints aren't met.
type DeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletionRequestValidationError) ErrorName() string { return "DeletionRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletionRequestValidationError{}

// Validate checks the field values on ListArchivalEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArchivalEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArchivalEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArchivalEntriesRequestMultiError, or nil if none found.
func (m *ListArchivalEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivalEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return ListArchivalEntriesRequestMultiError(errors)
	}

	return nil
}

// ListArchivalEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by ListArchivalEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListArchivalEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivalEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivalEntriesRequestMultiError) AllErrors() []error { return m }

// ListArchivalEntriesRequestValidationError is the validation error returned
// by ListArchivalEntriesRequest.Validate if the designated constraints aren't met.
type ListArchivalEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivalEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivalEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivalEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivalEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivalEntriesRequestValidationError) ErrorName() string {
	return "ListArchivalEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivalEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivalEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivalEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivalEntriesRequestValidationError{}

// Validate checks the field values on ListArchivalEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArchivalEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArchivalEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArchivalEventsRequestMultiError, or nil if none found.
func (m *ListArchivalEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivalEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadID

	// no validation rules for ShowAll

	if len(errors) > 0 {
		return ListArchivalEventsRequestMultiError(errors)
	}

	return nil
}

// ListArchivalEventsRequestMultiError is an error wrapping multiple validation
// errors returned by ListArchivalEventsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListArchivalEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivalEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivalEventsRequestMultiError) AllErrors() []error { return m }

// ListArchivalEventsRequestValidationError is the validation error returned by
// ListArchivalEventsRequest.Validate if the designated constraints aren't met.
type ListArchivalEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivalEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivalEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivalEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivalEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivalEventsRequestValidationError) ErrorName() string {
	return "ListArchivalEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivalEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivalEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivalEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivalEventsRequestValidationError{}

// Validate checks the field values on ListArchivalEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArchivalEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArchivalEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArchivalEntriesResponseMultiError, or nil if none found.
func (m *ListArchivalEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivalEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArchivalEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArchivalEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArchivalEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListArchivalEntriesResponseMultiError(errors)
	}

	return nil
}

// ListArchivalEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListArchivalEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListArchivalEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivalEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivalEntriesResponseMultiError) AllErrors() []error { return m }

// ListArchivalEntriesResponseValidationError is the validation error returned
// by ListArchivalEntriesResponse.Validate if the designated constraints
// aren't met.
type ListArchivalEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivalEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivalEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivalEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivalEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivalEntriesResponseValidationError) ErrorName() string {
	return "ListArchivalEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivalEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivalEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivalEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivalEntriesResponseValidationError{}

// Validate checks the field values on ListArchivalEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArchivalEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArchivalEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArchivalEventsResponseMultiError, or nil if none found.
func (m *ListArchivalEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivalEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArchivalEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArchivalEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArchivalEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListArchivalEventsResponseMultiError(errors)
	}

	return nil
}

// ListArchivalEventsResponseMultiError is an error wrapping multiple
// validation errors returned by ListArchivalEventsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListArchivalEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivalEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivalEventsResponseMultiError) AllErrors() []error { return m }

// ListArchivalEventsResponseValidationError is the validation error returned
// by ListArchivalEventsResponse.Validate if the designated constraints aren't met.
type ListArchivalEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivalEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivalEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivalEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivalEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivalEventsResponseValidationError) ErrorName() string {
	return "ListArchivalEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivalEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivalEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivalEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivalEventsResponseValidationError{}

// Validate checks the field values on ArchivalEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArchivalEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchivalEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArchivalEventMultiError, or
// nil if none found.
func (m *ArchivalEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchivalEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoUrl

	// no validation rules for ParentUrl

	// no validation rules for Message

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ArchivalEventMultiError(errors)
	}

	return nil
}

// ArchivalEventMultiError is an error wrapping multiple validation errors
// returned by ArchivalEvent.ValidateAll() if the designated constraints
// aren't met.
type ArchivalEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchivalEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchivalEventMultiError) AllErrors() []error { return m }

// ArchivalEventValidationError is the validation error returned by
// ArchivalEvent.Validate if the designated constraints aren't met.
type ArchivalEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchivalEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchivalEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchivalEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchivalEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchivalEventValidationError) ErrorName() string { return "ArchivalEventValidationError" }

// Error satisfies the builtin error interface
func (e ArchivalEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchivalEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchivalEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchivalEventValidationError{}

// Validate checks the field values on URLRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *URLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in URLRequestMultiError, or
// nil if none found.
func (m *URLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *URLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for UserID

	if len(errors) > 0 {
		return URLRequestMultiError(errors)
	}

	return nil
}

// URLRequestMultiError is an error wrapping multiple validation errors
// returned by URLRequest.ValidateAll() if the designated constraints aren't met.
type URLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLRequestMultiError) AllErrors() []error { return m }

// URLRequestValidationError is the validation error returned by
// URLRequest.Validate if the designated constraints aren't met.
type URLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLRequestValidationError) ErrorName() string { return "URLRequestValidationError" }

// Error satisfies the builtin error interface
func (e URLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLRequestValidationError{}

// Validate checks the field values on ContentArchivalEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContentArchivalEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContentArchivalEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContentArchivalEntryMultiError, or nil if none found.
func (m *ContentArchivalEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *ContentArchivalEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Url

	// no validation rules for ArchivedVideos

	// no validation rules for CurrentTotalVideos

	// no validation rules for LastSynced

	// no validation rules for BackoffFactor

	// no validation rules for DownloadID

	// no validation rules for UndownloadableVideos

	if len(errors) > 0 {
		return ContentArchivalEntryMultiError(errors)
	}

	return nil
}

// ContentArchivalEntryMultiError is an error wrapping multiple validation
// errors returned by ContentArchivalEntry.ValidateAll() if the designated
// constraints aren't met.
type ContentArchivalEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentArchivalEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentArchivalEntryMultiError) AllErrors() []error { return m }

// ContentArchivalEntryValidationError is the validation error returned by
// ContentArchivalEntry.Validate if the designated constraints aren't met.
type ContentArchivalEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentArchivalEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentArchivalEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentArchivalEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentArchivalEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentArchivalEntryValidationError) ErrorName() string {
	return "ContentArchivalEntryValidationError"
}

// Error satisfies the builtin error interface
func (e ContentArchivalEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContentArchivalEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentArchivalEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentArchivalEntryValidationError{}
