# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  react_app:
    image: ghcr.io/horahoradev/horahora/horahora.webapp:dev
    depends_on:
      - frontapi
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_ORIGIN=${PUBLIC_ORIGIN}
    volumes:
      - ./webapp/src:/webapp/src
      - ./webapp/public:/webapp/public
      - ./webapp/next.config.js:/webapp/next.config.js
    mem_limit: 300m

  frontapi:
    image: ghcr.io/horahoradev/horahora/horahora.frontapi:dev
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - JaegerAddress=
    volumes:
      - ./front_api:/horahora/front_api
    mem_limit: 300m

  scheduler:
    image: ghcr.io/horahoradev/horahora/horahora.scheduler:dev
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
    volumes:
      - ./scheduler:/horahora/scheduler
    mem_limit: 300m

  videoservice:
    image: ghcr.io/horahoradev/horahora/horahora.videoservice:dev
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
    volumes:
      - ./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro
    mem_limit: 300m

  userservice:
    image: ghcr.io/horahoradev/horahora/horahora.userservice:dev
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
    volumes:
      - ./user_service:/horahora/userservice
    mem_limit: 300m

  postgres:
    image: ghcr.io/horahoradev/horahora/horahora.postgres:dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data

  minio:
    image: ghcr.io/horahoradev/horahora/horahora.minio:dev
    restart: unless-stopped
    env_file:
      - ./.env.dev
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CACHE=off
    volumes:
      - ./videos:/data
    mem_limit: 300m

  gluetun:
    image: ghcr.io/horahoradev/horahora/horahora.gluetun:dev
    labels:
      name: gluetun
    cap_add:
      - NET_ADMIN
    env_file:
      - ./.env.dev
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=wireguard
      - WIREGUARD_ADDRESSES=${VPN_IP}
      - SERVER_CITIES=${VPN_CITIES}
      - HTTPPROXY=on
      - HTTPPROXY_LOG=on
      - BLOCK_MALCIOUS=off
  nginx:
    image: ghcr.io/horahoradev/horahora/horahora.nginx:dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - scheduler
      - videoservice
      - stomp_proxy
      - minio
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./nginx/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./videos/otomads:/etc/nginx/html/otomads

  rabbitmq:
    image: ghcr.io/horahoradev/horahora/horahora.activemq:dev
    restart: unless-stopped
    mem_limit: 300m

  stomp_proxy:
    image: ghcr.io/horahoradev/horahora/horahora.stomp_proxy:dev
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./stomp_proxy:/horahora/stomp_proxy
    mem_limit: 300m

volumes:
  postgresdata_dev:
